syntax = "proto2";
package Packet;

/* 
 * "外层消息"
 * 为了在反序列化前识别消息类型, 
 * 所有消息("内层消息")序列号后需要包装为"外层消息".
 * 即只收发BaseMessage消息.
 */
message BaseMessage {
  required string name = 1;
  required bytes bytes = 2;
}

/********** 账号系统 **********/

/* 账号 */
message Account {
  optional string account = 1;   // 账号
  optional string password = 2;  // 密码
  optional string name = 3;      // 名字
}

/* C2S 注册账号 */
message ReqRegisterAccount {
  optional Account register_account = 1;  // 要注册的账号信息
} 
/* S2C注册账号结果 */
message RetRegisterAccount {
  optional int32 error_code = 1; // 错误码
}

/* C2S 登录账号 */
message ReqLoginAccount {
  optional Account login_account = 1;  // 要登录的账号信息 (不携带name字段)
}
/* S2C 登录账号结果 */
message RetLoginAccount {
  optional int32 error_code = 1;  // 错误码
}

/********** 大厅系统 **********/

/* 房间基本信息 */
message BaseRoomInfo {
  optional int32 room_id = 1;  // 房间id
  optional int32 player_num = 2;  // 玩家人数
  optional int32 map_id = 3;  // 地图id
}

/* C2S 请求大厅信息 */
message ReqHallMessage {}
/* S2C 返回/同步大厅信息 */
message SyncHallMessage {
  optional bool is_sync = 1;  // 是否为同步消息
  optional int32 room_num = 2;  // 房间数量
  repeated BaseRoomInfo room_list = 3;  // 房间基本信息列表
}

/* C2S 请求创建房间 */
message ReqCreateRoom {}
/* S2C 返回创建房间结果 */
message RetCreateRoom {
  optional int32 error_code = 1;  // 错误码
  optional int32 room_id = 2;  // 房间id
}

/* C2S 请求加入房间 */
message ReqJoinRoom {
  optional int32 room_id = 1;  // 请求加入的房间id
}
/* S2C 加入房间结果 */  // 直接返回SyncRoomInfo
message RetJoinRoom {
  optional int32 error_code = 1;  // 错误码
}

/********** 房间系统 **********/

/* 房间内玩家信息 */
message RoomPlayerInfo {
  optional Account account_info = 1;  // 玩家账号信息 (不携带uid,password字段)
  optional string room_pos = 2;  // 在房间中的位置
  optional bool is_master = 3;  // 是否是房主
  optional bool is_ready = 4;  // 是否已准备
}

/* 房间完整信息 */
message RoomInfo {
  optional int32 room_id = 1;  // 房间id
  repeated RoomPlayerInfo player_list = 2;  // 玩家列表
  optional int32 map_id = 3;  // 地图id
}

/* C2S 请求房间完整信息 */  // ReqJoinRoom
message ReqRoomInfo {
  optional int32 room_id = 1;  // 请求的房间id
}
/* S2C 返回/同步房间完整信息 */
message SyncRoomInfo {
  optional bool is_sync = 1;  // 是否为同步消息
  optional int32 error_code = 2;  // 错误码 : 0->成功 ; 1->房间不存在
  optional RoomInfo room_info = 3;  // 房间信息
}

/* C2S 玩家动作 */
message ReqPlayerAction {
  optional int32 action_code = 1;  // 动作 : 1->准备 ; 2->取消准备 ; 3->退出房间 ; 4->切换地图
  optional RoomPlayerInfo player_info = 2; 
}
/* S2C 返回/同步玩家动作结果 */
message SyncPlayerAction {
  optional bool is_sync = 1;  // 是否为同步消息
  optional int32 action_code = 2;  // 动作 : 1->准备 ; 2->取消准备 ; 3->退出房间
  optional int32 error_code = 3;  // 错误码 : 0->成功 ; 1->失败
}

/********** 游戏系统 **********/

/* 游戏内玩家信息 */
message GamePlayerInfo {
  optional Account account_info = 1;  // 玩家账号信息 (不携带password字段)
  optional int32 game_pos = 2;  // 起跑线位置 : 1->左 ; 2->中 ; 3->右
  optional int32 color_id = 3;  // 颜色id
}

/* 游戏基本信息 */
message GameInfo {
  optional int32 map_id = 1;  // 地图id
  repeated GamePlayerInfo player_list = 2;  // 玩家列表
}

/* S2C 同步加载游戏 */
message SyncLoadGame {
  optional GameInfo game_info = 1;  // 游戏信息
}
/* C2S 汇报加载游戏完毕 */
message ReportLoadGame {}

/* C2S 请求开始游戏(加载完毕) */
message ReqStartGame {}
/* S2C 同步开始游戏倒计时 */
message SyncStartGame {}

/* 方位信息 */
message Position {
  optional int32 pos_x = 1;  // 位置 - x轴
  optional int32 pos_y = 2;  // 位置 - y轴
  optional int32 pos_z = 3;  // 位置 - z轴
  optional int32 rot_x = 4;  // 方向 - x轴
  optional int32 rot_y = 5;  // 方向 - y轴
  optional int32 rot_z = 6;  // 方向 - z轴
}

/* C2S 汇报自身方位信息 */
message ReportPosition {
  optional Position position = 1;  // 自身方位信息
}
/* S2C 同步玩家的方位信息 */
message SyncPosition {
  optional GamePlayerInfo player = 1;  // 同步的玩家信息
  optional Position position = 2;  // 玩家的位置
}

/* C2S 汇报游戏状态 */
message ReportGameState {
  optional int32 game_state_code = 1;  // 游戏状态码 : 0->进行中 ; 1->完成游戏 ; 2->中途退出
}
/* S2C 同步游戏状态 */
message SyncGameState {
  optional GamePlayerInfo player = 1;  // 同步的玩家信息
  optional int32 game_state_code = 2;  // 游戏状态码 : 0->进行中 ; 1->完成游戏 ; 2->中途退出
}